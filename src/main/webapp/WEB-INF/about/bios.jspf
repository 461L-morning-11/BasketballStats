<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <%@ page import="java.net.*" %>
<%@ page import="java.net.URL" %>
<%@ page import="org.xml.sax.SAXException" %> 
<%@ page import="java.net.HttpURLConnection" %>
<%@ page import="org.json.simple.parser.JSONParser" %>
<%@ page import="org.json.simple.JSONObject" %>
<%@ page import="org.json.simple.JSONArray" %>
<%@ page import="java.util.Scanner" %>
<%@ page import="org.apache.commons.codec.binary.Base64" %>
<%@ page import="java.net.URI"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h2>Meet the developers</h2>
      <br>
      <%!
      public static Long[] getCommits(String res) throws Exception{
    	  Long[] CorBarColHarChl = new Long[5];
          URL url = new URL(res);
          HttpURLConnection conn = (HttpURLConnection) url.openConnection();
          conn.setRequestMethod("GET");
          conn.connect();
          int responsecode = conn.getResponseCode();
          String inline = "";
          if (responsecode != 200)
              throw new RuntimeException("HttpResponseCode: " + responsecode);
          else {
              Scanner sc = new Scanner(url.openStream());
              while (sc.hasNext()) {
                  inline += sc.nextLine();
              }//System.out.println("\nJSON data in string format");//System.out.println(inline);
              sc.close();
          }

          JSONParser parse = new JSONParser();

          JSONArray jarr = (JSONArray) parse.parse(inline);
              try {
                  for (int j = 0; j < jarr.size(); j++) {
                      JSONObject personObject = (JSONObject) jarr.get(j);
                      System.out.println(personObject);
                      Long totalCommits = (Long) personObject.get("total");
                      JSONObject user = (JSONObject)  personObject.get("author");
                      String curUser = (String) user.get("login");

                      if (curUser.equals("coreykarnei")) {
                          CorBarColHarChl[0] = totalCommits;
                      } else if (curUser.equals("colbyjanecka")) {
                          CorBarColHarChl[2] = totalCommits;
                      } else if (curUser.equals("Barrett-S")) {
                          CorBarColHarChl[1] = totalCommits;
                      } else if (curUser.equals("mikoyanhsch")) {
                          CorBarColHarChl[3] = totalCommits;
                      } else if (curUser.equals("chloebryant")) {
                          CorBarColHarChl[4] = totalCommits;
                      }

                  }

              } catch (Exception e) {
                  e.printStackTrace();
              }
              return CorBarColHarChl;
    	  
      }
      public static int[] getIssues(String res) throws Exception {

    	        int[] CorBarColHarChl = {0,0,0,0,0};
    	        URL url = new URL(res);
    	        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    	        conn.setRequestMethod("GET");
    	        conn.connect();
    	        int responsecode = conn.getResponseCode();
    	        String inline = "";
    	        if (responsecode != 200)
    	            throw new RuntimeException("HttpResponseCode: " + responsecode);
    	        else {
    	            Scanner sc = new Scanner(url.openStream());
    	            while (sc.hasNext()) {
    	                inline += sc.nextLine();
    	            }//System.out.println("\nJSON data in string format");//System.out.println(inline);
    	            sc.close();
    	        }

    	        JSONParser parse = new JSONParser();

    	        JSONArray jarr = (JSONArray) parse.parse(inline);
    	        for(int i=0;i<jarr.size();i++) {
    	            JSONObject jobj = (JSONObject) jarr.get(i);
    	            JSONArray assignees = (JSONArray) jobj.get("assignees");
    	            for (int j = 0; j < assignees.size(); j++) {
    	                JSONObject user = (JSONObject) assignees.get(j);
    	                String curUser = (String) user.get("login");
    	                if(curUser.equals("coreykarnei")) {
    	                    CorBarColHarChl[0]++;
    	                }else if(curUser.equals("colbyjanecka")) {
    	                    CorBarColHarChl[2]++;
    	                }else if(curUser.equals("Barrett-S")) {
    	                    CorBarColHarChl[1]++;
    	                }else if(curUser.equals("mikoyanhsch")) {
    	                    CorBarColHarChl[3]++;
    	                }else if(curUser.equals("chloebryant")) {
    	                    CorBarColHarChl[4]++;
    	                }

    	            }

    	        }
    	        return CorBarColHarChl;
      }
      
      
      
      %> <%
      String commitsURL = "https://api.github.com/repos/461L-morning-11/BasketballStats/stats/contributors";
      String issuesURL = "https://api.github.com/repos/461L-morning-11/BasketballStats/issues";
      
      Long[] commits = new Long[5];
	  int[] issues = {0,0,0,0,0};
	  
      try{
      //both arrays VV have the following indecies: corey-0 barrett-1 colby-2 harry-3 chloe-4
     commits = getCommits(commitsURL);
     issues = getIssues(issuesURL);
      }catch(Exception e){
    	  e.printStackTrace();
    	  //if github returns a "forbidden" error on api call, default to saved values
    	  commits[2] = new Long(52); 
    	  commits[0] = new Long(47); 
    	  commits[1] = new Long(7); 
    	  commits[4] = new Long(14); 
    	  commits[3] = new Long(3);
    	  issues[2] = 0; 
    	  issues[0] = 2; 
    	  issues[1] = 1; 
    	  issues[4] = 0; 
    	  issues[3] = 0;
      }
      
      //String newSHA= getNewSHA(res);
      //pageContext.setAttribute("total_commits",getTotalCommits(get("https://api.github.com/repos/461L-morning-11/BasketballStats/compare/98284fc9903dacfc123c6bb131d3d500ad75dad7..."+newSHA)));
      pageContext.setAttribute("colby_commits", commits[2]);
      pageContext.setAttribute("corey_commits",commits[0]);
      pageContext.setAttribute("barrett_commits",commits[1]);
      pageContext.setAttribute("chloe_commits",commits[4]);
      pageContext.setAttribute("harry_commits",commits[3]);
     //pageContext.setAttribute("total_issues",getTotalIssues("https://api.github.com/search/issues?q=repo:461L-morning-11/BasketballStats"));
      pageContext.setAttribute("colby_issues",issues[2]);
      pageContext.setAttribute("corey_issues",issues[0]);
      pageContext.setAttribute("barrett_issues",issues[1]);
      pageContext.setAttribute("chloe_issues",issues[4]);
      pageContext.setAttribute("harry_issues",issues[3]);
      pageContext.setAttribute("total_issues",issues[0]+issues[1]+issues[2]+issues[3]+issues[4]);
      pageContext.setAttribute("total_commits",commits[0]+ commits[1]+commits[2]+commits[3]+commits[4]);
      %>
      <div class="card" style="width:400px">
      	<div class="embed-responsive embed-responsive-1by1">
      		<img class="card-img-top embed-responsive-item" src="../img/Barrett.jpg" alt="Picture of Barrett">
      	</div>
      	<div class="card-body">
      		<h4 class="card-title">Barrett Stricklin</h4>
    		<p class="card-text">Barrett is a junior studying Software Engineering at The University of Texas at Austin with experience in cybersecurity. He enjoys the outdoors and spending money on his home pc/audio setup. <br> Commits: ${(barrett_commits)} <br>Assigned Issues: ${(barrett_issues)}</p>
      	</div>
      </div>
      
      <br>
      
      <div class="card" style="width:400px">
      	<div class="embed-responsive embed-responsive-1by1">
      		<img class="card-img-top embed-responsive-item" src="../img/chloe.jpg" class="img-responsive" alt="Picture of Chloe">
      	</div>
      	<div class="card-body">
      		<h4 class="card-title">Chloe Bryant</h4>
    		<p class="card-text">Chloe is a third year ECE major at UT from Houston, TX with a technical core in software engineering. In her free time, she enjoys playing guitar and being outdoors.<br> Commits: ${(chloe_commits)} <br>Assigned Issues: ${(chloe_issues)}</p>
      	</div>
      </div>
      
      <br>
      
      <div class="card" style="width:400px">
      	<div class="embed-responsive embed-responsive-1by1">
      		<img class="card-img-top embed-responsive-item" src="../img/Colby.jpg" class="img-responsive" alt="Picture of Colby">
      	</div>
      	<div class="card-body">
      		<h4 class="card-title">Colby Janecka</h4>
    		<p class="card-text">Colby is an ECE major with a focus in Data Science, from Waco, TX, and enjoys making music. <br> Commits: ${(colby_commits)} <br>Assigned Issues: ${(colby_issues)}</p>
      	</div>
      </div>
      
      <br>
      
      <div class="card" style="width:400px">
      	<div class="embed-responsive embed-responsive-1by1">
      		<img class="card-img-top embed-responsive-item" src="../img/Corey.jpg" class="img-responsive" alt="Picture of Corey">
      	</div>
      	<div class="card-body">
      		<h4 class="card-title">Corey Karnei</h4>
    		<p class="card-text">Corey is an electrical engineering major at UT with a minor in business. Born and Raised in Waco, TX, he enjoys competition and the outdoors.<br>Commits: ${(corey_commits)} <br>Assigned Issues: ${(corey_issues)}</p>
      	</div>
      </div>
      
      <br>
      
      <div class="card" style="width:400px">
      	<div class="embed-responsive embed-responsive-1by1">
      		<img class="card-img-top embed-responsive-item" src="../img/Harry.jpg" class="img-responsive" alt="Picture of Harry">
      	</div>
      	<div class="card-body">
      		<h4 class="card-title">Harry Schneider</h4>
    		<p class="card-text">Harry is a senior Computer Engineering major at UT with a specialty towards software and network security. He is currently employed at Cisco Systems and his hobbies include building ship models and guns. <br>Commits: ${(harry_commits)} <br>Assigned Issues: ${(harry_issues)}</p>
      	</div>
      </div>

</body>
</html>